import fs from "fs";

import yargs from "yargs";
import { hideBin } from "yargs/helpers";
import generateFeed from "./feed";
import { getDumpPosts, writeDump } from "./io";
import { generateRedirect } from "./migration";
import { template } from "./template";

import { exportDatabase } from "./exportNotion";

import { zArgs } from "./zArgs";
import { z } from "zod";

const testSchema = z.object({
  a: z.string().describe("test a"),
  b: z.number().describe("test b"),
});

yargs(hideBin(process.argv))
  .scriptName("post-utils")
  .usage("$0 <cmd> [args]")
  .command(
    "dump",
    "Dump markdown file into json",
    (yargs) => {
      yargs.positional("mdDir", {
        type: "string",
        describe: "Root directory of the markdown files",
      });

      yargs.positional("imageDist", {
        type: "string",
        describe: "",
      });

      yargs.positional("output", {
        type: "string",
        describe: "",
        alias: ["o", "out"],
      });

      yargs.demandOption(["mdDir", "imageDist", "output"]);
    },
    async function(argv) {
      const mdDir = argv.mdDir as string;
      const imageDist = argv.imageDist as string;
      const output = argv.output as string;
      const dumpPosts = await getDumpPosts(mdDir, imageDist);
      await writeDump(output, dumpPosts);
    },
  )
  .command("rss", "generate rss feed for blog", (yargs) => {
    yargs.positional("dump", { type: "string", describe: "dump file generated by post-utils dump" });
    yargs.positional("dst", { type: "string", describe: "destination dir to generate rss feed" });

    yargs.demandOption(["dump", "dst"]);
  }, async function(argv) {
    await generateFeed(argv.dump as string, argv.dst as string);
  })
  .command("template", "write blog template", (yargs) => {
    yargs.positional("output", {
      type: "string",
      describe: "",
      alias: ["o", "out"],
    });
    yargs.demandOption(["output"]);
  }, function(argv) {
    fs.writeFileSync(argv.output as string, template());
  })
  .command("migration", "migration utils", (yargs) => {
    yargs.positional("src", { type: "string", describe: "posts src" });
    yargs.demand("src");
  }, async function(argv) {
    console.log(await generateRedirect(argv.src as string));
  })
  .command("paper-stream", "notion paper stream export", (yargs) => {
    yargs.positional("databaseId", { type: "string", describe: "database id" });
    yargs.positional("publicDir", { type: "string", describe: "public dir" });
    yargs.positional("outputDir", { type: "string", describe: "output dir" });
  }, async function(argv) {
    await exportDatabase(
      argv.databaseId as string,
      // @ts-expect-error
      (o) => o.properties["Status"].select.name === "Done",
      argv.publicDir as string,
      argv.outputDir as string,
    );
  })
  .command("test", "test", ...zArgs(testSchema, async (argv) => {
    console.log(argv);}))
  .help().parse();
